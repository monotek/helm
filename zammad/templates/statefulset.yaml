apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "zammad.fullname" . }}
  labels:
    {{- include "zammad.labels" . | nindent 4 }}
spec:
  replicas: 1
  serviceName: {{ include "zammad.name" . }}
  selector:
    matchLabels:
      {{- include "zammad.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "zammad.labels" . | nindent 8 }}
    spec:
      initContainers:
      - name: zammad-init
        image: {{ .Values.image.repository }}:{{if eq .Values.image.repository "zammad/zammad-docker-compose"}}zammad-{{ end }}{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: 
          - /bin/bash
          - -cx
          - |  
            set -e
            rsync -a --delete --exclude 'config/database.yml' --exclude 'public/assets/images/*' --exclude 'storage/fs/*' "${ZAMMAD_TMP_DIR}/" "${ZAMMAD_DIR}"
            rsync -a "${ZAMMAD_TMP_DIR}"/public/assets/images/ "${ZAMMAD_DIR}"/public/assets/images
            sed -i -e "s/.*config.cache_store.*file_store.*cache_file_store.*/    config.cache_store = :dalli_store, '{{ if .Values.memcached.enabled }}{{ .Release.Name }}-memcached{{ else }}{{ .Values.envConfig.memcached.host }}{{ end }}:{{ .Values.envConfig.memcached.port }}'\\n    config.session_store = :dalli_store, '{{ if .Values.memcached.enabled }}{{ .Release.Name }}-memcached{{ else }}{{ .Values.envConfig.memcached.host }}{{ end }}:{{ .Values.envConfig.memcached.port }}'/" config/application.rb
            if [ -n "${AUTOWIZARD_JSON}" ]; then
                echo "${AUTOWIZARD_JSON}" | base64 -d > auto_wizard.json
            fi
            chown -R "${ZAMMAD_USER}":"${ZAMMAD_USER}" "${ZAMMAD_DIR}"
        env:
        {{ if .Values.autoWizard.enabled }}
        - name: "AUTOWIZARD_JSON"
          valueFrom:
            secretKeyRef:
              name: "{{ template "zammad.fullname" . }}-autowizard"
              key: "autowizard"
        {{ end }}
        volumeMounts:
        - name: {{ template "zammad.fullname" . }}
          mountPath: /opt/zammad
      - name: postgresql-init
        image: {{ .Values.image.repository }}:{{if eq .Values.image.repository "zammad/zammad-docker-compose"}}zammad-{{ end }}{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
        command: 
          - /bin/bash
          - -cx
          - |    
            set -e
            sed -e "s#.*adapter:.*#  adapter: postgresql#g" -e "s#.*database:.*#  database: {{ .Values.envConfig.postgresql.db }}#g" -e "s#.*username:.*#  username: {{ .Values.envConfig.postgresql.user }}#g" -e "s#.*password:.*#  password: ${POSTGRESQL_PASS}\\n  host: {{ if .Values.postgresql.enabled }}{{ .Release.Name }}-postgresql{{ else }}{{ .Values.envConfig.postgresql.host }}{{ end }}\\n  port: {{ .Values.envConfig.postgresql.port }}#g" < contrib/packager.io/database.yml.pkgr > config/database.yml
            bundle exec rake db:migrate
            set +e
            bundle exec rake db:seed
            set -e
            bundle exec rake db:migrate
        env:
        - name: "POSTGRESQL_PASS"
          valueFrom:
            secretKeyRef:
              name: "{{ template "zammad.fullname" . }}-postgresql-pass"
              key: "postgresql-pass"
        volumeMounts:
        - name: {{ template "zammad.fullname" . }}
          mountPath: /opt/zammad         
      - name: elasticsearch-init
        image: {{ .Values.image.repository }}:{{if eq .Values.image.repository "zammad/zammad-docker-compose"}}zammad-{{ end }}{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
        command: 
          - /bin/bash
          - -cx
          - |    
            set -e
            bundle exec rails r 'Setting.set("es_url", "{{ .Values.envConfig.elasticsearch.schema }}://{{ if .Values.elasticsearch.enabled }}zammad-master{{ else }}{{ .Values.envConfig.elasticsearch.host }}{{ end }}:{{ .Values.envConfig.elasticsearch.port }}")'
            {{- if and .Values.elasticsearch.user .Values.elasticsearch.pass }}
            bundle exec rails r 'Setting.set("es_user", "{{ .Values.envConfig.elasticsearch.user }}")'
            bundle exec rails r 'Setting.set("es_password", "{{ .Values.envConfig.elasticsearch.pass }}")'
            {{ end }}
            bundle exec rake searchindex:rebuild
        env:
        {{- range $key, $value := .Values.extraEnv }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
        {{- end }}
        volumeMounts:
        - name: {{ template "zammad.fullname" . }}
          mountPath: /opt/zammad
      containers:
      - name: {{ .Chart.Name }}-nginx
        image: {{ .Values.image.repository }}:{{if eq .Values.image.repository "zammad/zammad-docker-compose"}}zammad-{{ end }}{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - /usr/sbin/nginx 
          - -g 
          - 'daemon off;'
        env:
        {{- range $key, $value := .Values.extraEnv }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
        {{- end }}
        ports:
        - name: http
          containerPort: 8080
        volumeMounts:
        - name: {{ template "zammad.fullname" . }}
          mountPath: /opt/zammad
        - name: {{ template "zammad.fullname" . }}-nginx
          mountPath: /etc/nginx/sites-enabled
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
{{ toYaml .Values.resources.nginx | indent 10 }}
      - name: {{ .Chart.Name }}-railsserver
        image: {{ .Values.image.repository }}:{{if eq .Values.image.repository "zammad/zammad-docker-compose"}}zammad-{{ end }}{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
        command: 
          - "bundle"
          - "exec"
          - "rails"
          - "server"
          - "puma"
          - "-b"
          - "[::]"
          - "-p"
          - "3000"
          - "-e"
          - "production"
        env:
        {{- range $key, $value := .Values.env }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
        {{- end }}
        ports:
        - name: railsserver
          containerPort: 3000
        volumeMounts:
         - name: {{ template "zammad.fullname" . }}
           mountPath: /opt/zammad
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
{{ toYaml .Values.resources.railsserver | indent 10 }}
      - name: {{ .Chart.Name }}-scheduler
        image: {{ .Values.image.repository }}:{{if eq .Values.image.repository "zammad/zammad-docker-compose"}}zammad-{{ end }}{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
        command: 
          - "bundle"
          - "exec"
          - "script/scheduler.rb"
          - "run"
        env:
        {{- range $key, $value := .Values.extraEnv }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
        {{- end }}
        volumeMounts:
         - name: {{ template "zammad.fullname" . }}
           mountPath: /opt/zammad
        resources:
{{ toYaml .Values.resources.scheduler | indent 10 }}
      - name: {{ .Chart.Name }}-websocket
        image: {{ .Values.image.repository }}:{{if eq .Values.image.repository "zammad/zammad-docker-compose"}}zammad-{{ end }}{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
        command: 
          - "bundle"
          - "exec"
          - "script/websocket-server.rb"
          - "-b"
          - "0.0.0.0"
          - "-p"
          - "6042"
          - "start"
        env:
        {{- range $key, $value := .Values.extraEnv }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
        {{- end }}
        ports:
        - name: websocket
          containerPort: 6042
        volumeMounts:
        - name: {{ template "zammad.fullname" . }}
          mountPath: /opt/zammad
        readinessProbe:
          tcpSocket:
            port: 6042
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 6042
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
{{ toYaml .Values.resources.websocket | indent 10 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      - name: {{ template "zammad.fullname" . }}-nginx
        configMap:
          name: {{ template "zammad.fullname" . }}-nginx
{{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
      - name: {{ template "zammad.fullname" . }} 
        persistentVolumeClaim:
{{- with .Values.persistence.existingClaim }}
          claimName: {{ .Values.persistence.existingClaim | default (include "zammad.fullname" .) }}
{{- end }}
{{- else if not .Values.persistence.enabled }}
      - name: {{ template "zammad.fullname" . }}
        emptyDir: {}
{{- else if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
  - metadata:
      name: {{ template "zammad.fullname" . }}
    spec:
      accessModes: 
      {{- range .Values.persistence.accessModes }}
        - {{ . | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
      {{- with .Values.persistence.storageClass }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
{{- end }}

